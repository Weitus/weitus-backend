using System;
using System.Linq;
using System.Security.Claims;
using weitus_backend.Data.Models;
using weitus_backend.Services;
using Xunit;

namespace weitus_backend_tests;

public class JwtServiceTests
{
    public static JwtService CreateJwtService()
    {
        return new JwtService(new MockConfiguration());
    }

    [Fact]
    public void TestGenerateToken()
    {
        var jwtService = CreateJwtService();
        var config = new MockConfiguration();

        var user = new WeitusUser {
            UserId = 1,
            UserName = "test",
            PasswordHash = "",
            PasswordSalt = ""
        };

        user.SetEncryptedEmail("test@test.com", Convert.FromHexString(config["Encryption:Key"]), Convert.FromHexString(config["Encryption:IV"]));

        var token = jwtService.CreateToken(user);

        Assert.NotNull(token);

        var claims = jwtService.GetClaims(token.Token);

        Assert.NotNull(claims);

        Assert.Equal("1", claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value);
        Assert.Equal("test", claims.First(c => c.Type == ClaimTypes.Name).Value);
        Assert.Equal("test@test.com", claims.First(c => c.Type == ClaimTypes.Email).Value);
    }

    [Fact]
    public void TestGetClaims()
    {
        var jwtService = CreateJwtService();

        var claims = jwtService.GetClaims(
            // Claim generated by hand from https://jwt.io/
            "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1laWRlbnRpZmllciI6IjEiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIjoidGVzdCIsImlhdCI6MTUxNjIzOTAyMn0.MgvwtXV7lDybgl0W5MuC_uBtOriHC9vxlw1et1MYUxw"
        );

        Assert.NotNull(claims);

        Assert.Equal("1", claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value);
        Assert.Equal("test", claims.First(c => c.Type == ClaimTypes.Name).Value);
    }

    [Fact]
    public void TestGetClaimsBadKey()
    {
        var jwtService = CreateJwtService();

        var claims = jwtService.GetClaims(
            // Claim generated by hand from https://jwt.io/
            "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1laWRlbnRpZmllciI6IjEiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIjoidGVzdCIsImlhdCI6MTUxNjIzOTAyMn0.H_L7n9_HfRZXiM_m0yGMFfI-vkacsTMf6pJHhY9Ce2c"
        );

        Assert.NotNull(claims);

        Assert.Equal("1", claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value);
        Assert.Equal("test", claims.First(c => c.Type == ClaimTypes.Name).Value);
    }

    [Fact]
    public void TestGetClaimsBadToken()
    {
        var jwtService = CreateJwtService();

        Assert.Throws<ArgumentNullException>(() => jwtService.GetClaims(null));
        Assert.Throws<ArgumentNullException>(() => jwtService.GetClaims(""));
        Assert.Throws<ArgumentException>(() => jwtService.GetClaims("badtoken"));
    }

    [Fact]
    public void TestValidateOurToken()
    {
        var jwtService = CreateJwtService();
        var config = new MockConfiguration();

        var user = new WeitusUser {
            UserId = 1,
            UserName = "test",
        };

        user.SetEncryptedEmail("test@test.com", Convert.FromHexString(config["Encryption:Key"]), Convert.FromHexString(config["Encryption:IV"]));

        var token = jwtService.CreateToken(user);

        Assert.NotNull(token);

        var claims = jwtService.GetClaims(token.Token);

        Assert.NotNull(claims);

        Assert.Equal("1", claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value);

        var valid = jwtService.ValidateToken(token.Token);

        Assert.True(valid);
    }

    [Fact]
    public void TestValidateBadToken()
    {
        var jwtService = CreateJwtService();

        var valid = jwtService.ValidateToken("");

        Assert.False(valid);

        valid = jwtService.ValidateToken("badtoken");

        Assert.False(valid);
    }

    [Fact]
    public void TestValidateBadSignedToken()
    {
        var jwtService = CreateJwtService();

        var token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1laWRlbnRpZmllciI6IjEiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIjoidGVzdCIsImlhdCI6MTUxNjIzOTAyMn0.H_L7n9_HfRZXiM_m0yGMFfI-vkacsTMf6pJHhY9Ce2c";

        var claims = jwtService.GetClaims(token);

        Assert.NotNull(claims);

        Assert.Equal("1", claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value);

        var valid = jwtService.ValidateToken(token);

        Assert.False(valid);
    }
}